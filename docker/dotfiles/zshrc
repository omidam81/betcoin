###############
# environment #
###############

[ ! "$LANG" = en_US.UTF8 ] && export LANG=en_US.UTF8

if [[ -f $HOME/.gpg-agent-info ]]
then
    . $HOME/.gpg-agent-info
    export GPG_AGENT_INFO
    export GPG_TTY=$(tty)
    export SSH_AUTH_SOCK
    export SSH_AGENT_PID
fi

############
# terminal #
############

# only set xterm-256color when we are sure we are using a color terminal
if [[ "$COLORTERM" == "gnome-terminal" ]] || [[ "$COLORTERM" == "xfce4-terminal" ]]
then
    export TERM=xterm-256color
fi

################
# plugin setup #
################

plugins=(zsh-users/zsh-completions zsh-users/zsh-syntax-highlighting)

# only do this if git is installed
if [[ -n "$(which git)" ]]
then
    if [[ ! -d "$HOME/.zsh" ]]
    then
        mkdir "$HOME/.zsh"
    fi

    for plugin in $plugins
    do
        gitURL="https://github.com/${plugin}.git"
        gitDest="$HOME/.zsh/plugins/${plugin#*/}"
        if [[ ! -d "$gitDest" ]]
        then
            echo "cloning repo"
            git clone $gitURL $gitDest
        fi
    done
fi



##############
# completion #
##############
zstyle ':completion:*' completer _complete _ignored _correct _approximate
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' menu select=long
zstyle ':completion:*' prompt 'Um......'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle :compinstall filename $HOME'/.zshrc'

zmodload zsh/complist
autoload -Uz compinit
setopt extendedglob
fpath=($HOME/.zsh/completions $fpath)
# more completions
# from https://github.com/zsh-users/zsh-completions
fpath=($HOME/.zsh/plugins/zsh-completions/src $fpath)
compinit

#########
# marks #
#########

export MARKPATH=$HOME/.marks

function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark"
}

function mark {
    mkdir -p "$MARKPATH"
    ln -s "$(pwd)" "$MARKPATH/$1"
}

function unmark {
    rm -i "$MARKPATH/$1"
}

function marks {
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}

function _completemarks {
    reply=($(ls $MARKPATH))
}

compctl -K _completemarks jump
compctl -K _completemarks unmark

##########
# docker #
##########

function _dockr {
    reply=("clean" "cleanimages" "viz" "ip")
}

compctl -K _dockr dockr

##################
# vi keybindings #
##################
bindkey -v
# jk for vim escape
bindkey -M viins 'jk' vi-cmd-mode
# :wq for ecexute
bindkey -M vicmd -r ':'
bindkey -M vicmd ':wq' accept-line
bindkey -M vicmd ':w' accept-line
# allow deletion over newlines and past insert point
bindkey "^?" backward-delete-char
bindkey "^H" backward-delete-char

###########
# history #
###########

HISTFILE=~/.zhistory
HISTSIZE=1000
SAVEHIST=1000
setopt appendHistory
setopt shareHistory
setopt histIgnoreAllDups
bindkey "^R" history-incremental-search-backward
bindkey -M vicmd "^R" history-incremental-search-backward
bindkey "^[[A" history-search-backward
bindkey "^[[B" history-search-forward


###############
# tetris, duh #
###############

autoload -U tetris
zle -N tetris
bindkey "^T" tetris

###############
# from bashrc #
###############

# put ls colors in an external file, because it is annoying
if [[ -f $HOME/.zsh/ls-colors.zsh ]]
then
    source $HOME/.zsh/ls-colors.zsh
fi
export EDITOR="vim"

# alias less='/usr/share/vim/vim73/macros/less.sh'
# colors for less
export LESS="-R"
export LESS_TERMCAP_me=$(printf '\e[0m')
export LESS_TERMCAP_se=$(printf '\e[0m')
export LESS_TERMCAP_ue=$(printf '\e[0m')
export LESS_TERMCAP_mb=$(printf '\e[1;32m')
export LESS_TERMCAP_md=$(printf '\e[1;34m')
export LESS_TERMCAP_us=$(printf '\e[1;32m')
export LESS_TERMCAP_so=$(printf '\e[1;44;1m')
export LESSOPEN="| /usr/bin/source-highlight-esc.sh %s"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

###########
# aliases #
###########


PLATFORM=$(uname -s)
# ls and tree
if [[ "$PLATFORM" = "Linux" ]]
then
    alias ls='ls -lhF --color'
    alias la='ls -lhfa --color'
    alias ll='ls -aF'
elif [[ "$PLATFORM" = "Darwin" ]]
then
    alias ls='ls -lhFG'
    alias la='ls -lhfaG'
    alias ll='ls -aF'
fi

alias tree='tree -ChF'

#color for grep
alias grep='grep --color'

alias google-chrome='google-chrome --audio-buffer-size=2048'
alias chromium='chromium --audio-buffer-size=2048'

# alias for bitcoind testnet
alias testnet='bitcoind -datadir='$HOME'/.bitcoin-testnet'
compdef testnet=bitcoind
# compctl -K _bitcoind testnet

# password gen
alias password-gen="echo 'running apg' && echo && apg"

# alias for backing up home folder
alias homebackup='rsync -av --include-from $HOME/.rsync-include --exclude "*" $HOME/'

# pass aliases to sudo
alias sudo='sudo '

# some git shit
g() {
    if [[ -z "$1" ]]
    then
        git status
    else
        git $*
    fi
}

alias gl='git la'
alias gp='git push'
alias gf='git fetch'
alias gls='git ls-files'
compdef g=git
alias gprojects='dirname */.git'
# compctl -K _git g

if [[ $FBTERM -eq 1 ]]
then
    export TERM=fbterm
fi
#######
# zle #
#######

zle_highlight=(suffix:fg=red)

zle-line-init() {
    # zle -K viins
    # echo -ne "\033]12;lightblue\007"
    # echo -ne "\033[6 q"
}
zle-keymap-select() {
    if [ $KEYMAP = vicmd ]; then
        # echo -ne "\033]12;grey\007"
        # echo -ne "\033[2 q"
    else
        # echo -ne "\033]12;lightblue\007"
        # echo -ne "\033[6 q"
    fi
    if [[ -z $BUFFER && $KEYMAP == vicmd ]] 
    then
        BUFFER=" "
        BUFFER=""
    fi
    zle reset-prompt
}

_pd-fortune() {
    zle -M "$(fortune -a | sed 's/\t/  /g')"
}

_pd-gitStatus() {

    gitStatus="$(git status 2>/dev/null | sed 's/\t/  /g')"
    if [ -z $gitStatus ]
    then
        gitStatus="Not a git repo"
    fi
    zle -M $gitStatus
}
zle -N _pd-fortune
bindkey "^F" _pd-fortune
zle -N _pd-gitStatus
bindkey "^G" _pd-gitStatus

_ed_er() {
    vi ~/.vimrc
}

_src_rc() {
    source ~/vimrc
}
bindkey "^E" _ed_rc
bindkey "^W" _src_rc

zle -N zle-line-init
zle -N zle-keymap-select

# syntax highlighing on prompt
# from https://github.com/zsh-users/zsh-syntax-highlighting
source $HOME/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

#########################
# vi detector functions #
#########################

_vimode() {
    text="${${KEYMAP/vicmd/<<<}/(main|viins)/}"
    echo -n "%F{red}$text%f"

}

_vimode_color() {
    if [[ "$KEYMAP" == "vicmd" ]]
    then
        echo -n '%F{red}'
    else
        echo -n '%f'
    fi
}

############
# vcs info #
############

autoload -Uz vcs_info
zstyle ':vcs_info:*' stagedstr '%F{green} S'
zstyle ':vcs_info:*' unstagedstr '%F{yellow} C'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' actionformats "${branchformat} %F{blue}(%F{red}%a%F{blue})"
zstyle ':vcs_info:*' enable git svn hg
zstyle ':vcs_info:git*:*' get-revision true


##########
# prompt #
##########

autoload -U promptinit
promptinit
autoload -U colors && colors
setopt prompt_subst


runningSSH=" "
if [ "$SSH_CONNECTION" ]
then
    runningSSH="%F{red}ssh %f"
fi

####################
# speial functions #
####################
termTitle='%n@%m: %~'

set-title () {
    termTitle=$1
}

precmd () {
    print -Pn "\e]0;$termTitle\a"
    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]] {
        branchformat='%F{blue}%b%c%u%f'
      } else {
        branchformat="%F{blue}%b%c%u %F{red}U%f"
      }
      branchformat="%F{yellow}%s %f${branchformat} %F{red}%7.7i%f"

    zstyle ':vcs_info:*' formats " [${branchformat}]"

    promptSplit='
'
    if [[ $COLUMNS -lt 150 ]] promptSplit="
"
    if [[ $COLUMNS -le 78 ]]
    then
        RPS1='$(_vimode)'
        PS1='%(!.%F{red}.%F{yellow})%n@%2m %F{blue}%3~%f${vcs_info_msg_0_} %f%W %T %F{magenta}%h%f${promptSplit}${runningSSH}$(_vimode_color)%B%#%b%f '
    else
        PS1='%(!.%F{red}.%F{yellow})%n@%2m %F{blue}%3~%f${vcs_info_msg_0_} %f%W %T %f%y %(?.%F{green}✓.%F{red}✗)%F{magenta} %h%f${promptSplit}${runningSSH}$(_vimode_color)%B%#%b%f '
        RPS1='$(_vimode)'
    fi
    vcs_info

}

preexec() {
    # echo -ne "\033]12;grey\007"
    # echo -ne "\033[2 q"
}

################
# local config #
################

LOCALFILE="$HOME/.zshrc.local" 
if [[ -f "$LOCALFILE" ]]
then
    source "$LOCALFILE"
fi
